/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import config.Conectar;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mariana&vinicius
 */
public class telaHistoricoManutencao extends javax.swing.JInternalFrame {
    Conectar con = new Conectar();
   
    public telaHistoricoManutencao() {
        initComponents();
        grupo.add(rbtOSPrevent);
        grupo.add(rbtOSCorret);       
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo = new javax.swing.ButtonGroup();
        pnlHistorico = new javax.swing.JPanel();
        txtPlaca = new app.bolivia.swing.JCTextField();
        txtCodOS = new app.bolivia.swing.JCTextField();
        rbtOSPrevent = new javax.swing.JRadioButton();
        rbtOSCorret = new javax.swing.JRadioButton();
        btnConsultarOS = new javax.swing.JButton();
        btnLimparOS = new javax.swing.JButton();
        btnConsultarProdOS = new javax.swing.JButton();
        btnLimparProdOS = new javax.swing.JButton();
        btnGerarRelatorio = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistorico = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProdOS = new javax.swing.JTable();
        dcInicio = new com.toedter.calendar.JDateChooser();
        dcFim = new com.toedter.calendar.JDateChooser();
        pnlConsultarOS = new javax.swing.JPanel();
        lblConsultarOS = new javax.swing.JLabel();
        pnlConsultarProdOS = new javax.swing.JPanel();
        lblConsultarProdOS = new javax.swing.JLabel();
        telaManutencao = new javax.swing.JLabel();

        setClosable(true);
        setResizable(true);

        pnlHistorico.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtPlaca.setBorder(null);
        txtPlaca.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtPlaca.setOpaque(false);
        txtPlaca.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        pnlHistorico.add(txtPlaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 120, 30));

        txtCodOS.setBorder(null);
        txtCodOS.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtCodOS.setOpaque(false);
        txtCodOS.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        pnlHistorico.add(txtCodOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 510, 120, 30));

        rbtOSPrevent.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        rbtOSPrevent.setForeground(java.awt.SystemColor.controlLtHighlight);
        rbtOSPrevent.setText("O. S. PREVENTIVA");
        pnlHistorico.add(rbtOSPrevent, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 130, -1, -1));

        rbtOSCorret.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        rbtOSCorret.setForeground(java.awt.SystemColor.controlLtHighlight);
        rbtOSCorret.setText("O. S. CORRETIVA");
        pnlHistorico.add(rbtOSCorret, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 130, -1, -1));

        btnConsultarOS.setContentAreaFilled(false);
        btnConsultarOS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConsultarOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarOSActionPerformed(evt);
            }
        });
        pnlHistorico.add(btnConsultarOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 120, 40, 40));

        btnLimparOS.setContentAreaFilled(false);
        btnLimparOS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimparOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparOSActionPerformed(evt);
            }
        });
        pnlHistorico.add(btnLimparOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 130, 40, 30));

        btnConsultarProdOS.setContentAreaFilled(false);
        btnConsultarProdOS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConsultarProdOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarProdOSActionPerformed(evt);
            }
        });
        pnlHistorico.add(btnConsultarProdOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 500, -1, 40));

        btnLimparProdOS.setContentAreaFilled(false);
        btnLimparProdOS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimparProdOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparProdOSActionPerformed(evt);
            }
        });
        pnlHistorico.add(btnLimparProdOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 500, 30, 40));

        btnGerarRelatorio.setContentAreaFilled(false);
        btnGerarRelatorio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pnlHistorico.add(btnGerarRelatorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 850, 260, 30));

        tblHistorico.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblHistorico.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        tblHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "CÃ“D. OS", "PLACA", "DATA OS", "DATA MANUT.", "TIPO MANUT.", "STATUS OS", "RE"
            }
        ));
        tblHistorico.setRowHeight(30);
        jScrollPane1.setViewportView(tblHistorico);

        pnlHistorico.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 240, 1050, 220));

        tblProdOS.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblProdOS.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        tblProdOS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CÃ“D. PROD.", "DESCRIÃ‡ÃƒO PRODUTO", "VALOR UNIT."
            }
        ));
        tblProdOS.setRowHeight(30);
        jScrollPane2.setViewportView(tblProdOS);
        if (tblProdOS.getColumnModel().getColumnCount() > 0) {
            tblProdOS.getColumnModel().getColumn(1).setPreferredWidth(750);
        }

        pnlHistorico.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 570, 1050, 260));

        dcInicio.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        pnlHistorico.add(dcInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 120, 160, 40));

        dcFim.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        pnlHistorico.add(dcFim, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 160, 40));

        pnlConsultarOS.setBackground(new java.awt.Color(204, 204, 204));
        pnlConsultarOS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblConsultarOS.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        javax.swing.GroupLayout pnlConsultarOSLayout = new javax.swing.GroupLayout(pnlConsultarOS);
        pnlConsultarOS.setLayout(pnlConsultarOSLayout);
        pnlConsultarOSLayout.setHorizontalGroup(
            pnlConsultarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1046, Short.MAX_VALUE)
            .addGroup(pnlConsultarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlConsultarOSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblConsultarOS, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnlConsultarOSLayout.setVerticalGroup(
            pnlConsultarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
            .addGroup(pnlConsultarOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlConsultarOSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblConsultarOS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        lblConsultarOS.getAccessibleContext().setAccessibleDescription("");
        lblConsultarOS.getAccessibleContext().setAccessibleParent(pnlConsultarOS);

        pnlHistorico.add(pnlConsultarOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 1050, 40));

        pnlConsultarProdOS.setBackground(new java.awt.Color(204, 204, 204));
        pnlConsultarProdOS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblConsultarProdOS.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        javax.swing.GroupLayout pnlConsultarProdOSLayout = new javax.swing.GroupLayout(pnlConsultarProdOS);
        pnlConsultarProdOS.setLayout(pnlConsultarProdOSLayout);
        pnlConsultarProdOSLayout.setHorizontalGroup(
            pnlConsultarProdOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
            .addGroup(pnlConsultarProdOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlConsultarProdOSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblConsultarProdOS, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnlConsultarProdOSLayout.setVerticalGroup(
            pnlConsultarProdOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
            .addGroup(pnlConsultarProdOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlConsultarProdOSLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblConsultarProdOS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pnlHistorico.add(pnlConsultarProdOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 500, 750, 40));

        telaManutencao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/TelaHistorico.png"))); // NOI18N
        pnlHistorico.add(telaManutencao, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 890));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimparOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparOSActionPerformed
        lblConsultarOS.setText("");
        dcInicio.setDate(null);
        dcFim.setDate(null);
        txtPlaca.setText("");
        DefaultTableModel model = (DefaultTableModel) tblHistorico.getModel();
        model.setRowCount(0);       
    }//GEN-LAST:event_btnLimparOSActionPerformed

    private void btnLimparProdOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparProdOSActionPerformed
        lblConsultarProdOS.setText("");
        txtCodOS.setText("");
        DefaultTableModel modelProdOS = (DefaultTableModel) tblProdOS.getModel();
        modelProdOS.setRowCount(0); 
    }//GEN-LAST:event_btnLimparProdOSActionPerformed

    private void btnConsultarProdOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarProdOSActionPerformed
        String idOrdemServico = txtCodOS.getText();
        String tipoManutencao = "Preventiva".equals(consultarTipoManutencao(idOrdemServico)) ? "Preventiva" : "Corretiva";
        consultarProduto(idOrdemServico, tipoManutencao);
    }//GEN-LAST:event_btnConsultarProdOSActionPerformed

    private void btnConsultarOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarOSActionPerformed
        consultarOrdensServico();
    }//GEN-LAST:event_btnConsultarOSActionPerformed
      
    private String consultarTipoManutencao(String idOrdemServico) {
    Connection conexao = con.conexao();
    String tipoManutencao = "";
    try {
        // Verifica se o ID da ordem de serviÃ§o foi digitado
        if (idOrdemServico.isEmpty()) {
            lblConsultarProdOS.setText("Digite o cÃ³digo da ordem de serviÃ§o.");
            return tipoManutencao;
        }
 
        String sql = "SELECT tipoManutencao FROM ordemservico WHERE id = ?";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setString(1, idOrdemServico);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            tipoManutencao = rs.getString("tipoManutencao");
        } else {
            lblConsultarProdOS.setText("Ordem de serviÃ§o nÃ£o encontrada.");
        }
        con.desconectar(conexao);
    } catch (SQLException ex) {
        lblConsultarProdOS.setText("Erro ao consultar tipo de manutenÃ§Ã£o: " + ex.getMessage());
    }
    return tipoManutencao;
}
 
private void consultarProduto(String idOrdemServico, String tipoManutencao) {
    DefaultTableModel model = (DefaultTableModel) tblProdOS.getModel();
    model.setRowCount(0);
    Connection conexao = con.conexao();
    try {
        // Verifica se o ID da ordem de serviÃ§o foi digitado
        if (idOrdemServico.isEmpty()) {
            lblConsultarProdOS.setText("Digite o cÃ³digo da ordem de serviÃ§o.");
            return;
        }
 
        String sql;
        if (tipoManutencao.equals("Preventiva")) {
            // Consulta na tabela ordem_plano para pegar os ids dos planos relacionados Ã  ordem de serviÃ§o
            sql = "SELECT fk_idPlano FROM ordem_plano WHERE fk_idOrdem = ?";
            PreparedStatement stmt = conexao.prepareStatement(sql);
            stmt.setString(1, idOrdemServico);
            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) {
                lblConsultarProdOS.setText("Nenhum plano encontrado para OS preventiva.");
                return;
            }
            do {
                // Para cada id de plano, consulte na tabela plano_produto para pegar os ids dos produtos relacionados
                sql = "SELECT fk_idCodigo FROM plano_produto WHERE fk_idPlano = ?";
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, rs.getString("fk_idPlano"));
                ResultSet rsProdutos = stmt.executeQuery();
                while (rsProdutos.next()) {
                    // Consulte na tabela cadastro_produto para obter as informaÃ§Ãµes do produto
                    sql = "SELECT idCodigo, descricaoItem, valorUnitario FROM cadastro_produto WHERE idCodigo = ?";
                    stmt = conexao.prepareStatement(sql);
                    stmt.setString(1, rsProdutos.getString("fk_idCodigo"));
                    ResultSet rsDescricao = stmt.executeQuery();
                    if (rsDescricao.next()) {
                        model.addRow(new Object[]{
                            rsDescricao.getString("idCodigo"),
                            rsDescricao.getString("descricaoItem"),
                            rsDescricao.getDouble("valorUnitario")
                        });
                    }
                }
            } while (rs.next());
        } else if (tipoManutencao.equals("Corretiva")) {
            // Consulta direta na tabela ordem_produto para pegar os ids dos produtos relacionados Ã  ordem de serviÃ§o corretiva
            sql = "SELECT fk_IdCodigo FROM ordem_produto WHERE fk_IdOrdem = ?";
            PreparedStatement stmt = conexao.prepareStatement(sql);
            stmt.setString(1, idOrdemServico);
            ResultSet rsProdutos = stmt.executeQuery();
            if (!rsProdutos.next()) {
                lblConsultarProdOS.setText("Nenhum produto encontrado para OS corretiva.");
                return;
            }
            do {
                // Consulte na tabela cadastro_produto para obter as informaÃ§Ãµes do produto
                sql = "SELECT idCodigo, descricaoItem, valorUnitario FROM cadastro_produto WHERE idCodigo = ?";
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, rsProdutos.getString("fk_IdCodigo"));
                ResultSet rsDescricao = stmt.executeQuery();
                if (rsDescricao.next()) {
                    model.addRow(new Object[]{
                        rsDescricao.getString("idCodigo"),
                        rsDescricao.getString("descricaoItem"),
                        rsDescricao.getDouble("valorUnitario")
                    });
                }
            } while (rsProdutos.next());
        }
        con.desconectar(conexao);
    } catch (SQLException ex) {
        lblConsultarProdOS.setText("Erro ao consultar produtos: " + ex.getMessage());
    }
}
        
    private void consultarOrdensServico() {
    Connection conexao = con.conexao();
    DefaultTableModel model = (DefaultTableModel) tblHistorico.getModel();
    model.setRowCount(0);
    String placa = txtPlaca.getText();
    String tipo = "";
    if (rbtOSPrevent.isSelected()) {
        tipo = "Preventiva";
    } else if (rbtOSCorret.isSelected()) {
        tipo = "Corretiva";
    }
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String dataInicio = dcInicio.getDate() != null ? dateFormat.format(dcInicio.getDate()) : "";
    String dataFim = dcFim.getDate() != null ? dateFormat.format(dcFim.getDate()) : "";
    try {
        // Verifica se a placa estÃ¡ vazia
        if (placa.isEmpty()) {
            lblConsultarOS.setText("Por favor, insira uma placa.");
            lblConsultarOS.setVisible(true);
            return;
        }
        // Verifica se algum tipo de manutenÃ§Ã£o foi selecionado
        if (tipo.isEmpty()) {
            lblConsultarOS.setText("Por favor, selecione o tipo de manutenÃ§Ã£o.");
            lblConsultarOS.setVisible(true);
            return;
        }
        // Verifica se a data de inÃ­cio estÃ¡ vazia
        if (dataInicio.isEmpty()) {
            lblConsultarOS.setText("Por favor, selecione a data de inÃ­cio.");
            lblConsultarOS.setVisible(true);
            return;
        }
        // Verifica se a data de fim estÃ¡ vazia
        if (dataFim.isEmpty()) {
            lblConsultarOS.setText("Por favor, selecione a data de fim.");
            lblConsultarOS.setVisible(true);
            return;
        }
        // Verifica se a placa existe na tabela veiculo
        String sqlPlaca = "SELECT * FROM veiculo WHERE placa = ?";
        PreparedStatement stmtPlaca = conexao.prepareStatement(sqlPlaca);
        stmtPlaca.setString(1, placa);
        ResultSet rsPlaca = stmtPlaca.executeQuery();
        if (!rsPlaca.next()) {
            lblConsultarOS.setText("A placa especificada nÃ£o existe.");
            lblConsultarOS.setVisible(true);
            return;
        }
        String sql = "SELECT * FROM ordemservico WHERE dataCheck BETWEEN ? AND ? AND placa = ? AND tipoManutencao = ?";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setString(1, dataInicio);
        stmt.setString(2, dataFim);
        stmt.setString(3, placa);
        stmt.setString(4, tipo);
        ResultSet rs = stmt.executeQuery();
        if (!rs.isBeforeFirst()) {
            lblConsultarOS.setText("Nenhuma OS localizada com os dados fornecidos.");
            lblConsultarOS.setVisible(true);
        } else {
            lblConsultarOS.setVisible(false); // Esconde o label se houver resultados
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("placa"),
                    rs.getString("dataCheck"),
                    rs.getString("data"),
                    rs.getString("tipoManutencao"),
                    rs.getString("statusOrdem"),
                    rs.getString("re")
                });
            }
        }
        con.desconectar(conexao);
    } catch (SQLException ex) {
        lblConsultarOS.setText("Erro ao consultar ordens de serviÃ§o: " + ex.getMessage());
        lblConsultarOS.setVisible(true);
    }
}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultarOS;
    private javax.swing.JButton btnConsultarProdOS;
    private javax.swing.JButton btnGerarRelatorio;
    private javax.swing.JButton btnLimparOS;
    private javax.swing.JButton btnLimparProdOS;
    private com.toedter.calendar.JDateChooser dcFim;
    private com.toedter.calendar.JDateChooser dcInicio;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblConsultarOS;
    private javax.swing.JLabel lblConsultarProdOS;
    private javax.swing.JPanel pnlConsultarOS;
    private javax.swing.JPanel pnlConsultarProdOS;
    private javax.swing.JPanel pnlHistorico;
    private javax.swing.JRadioButton rbtOSCorret;
    private javax.swing.JRadioButton rbtOSPrevent;
    private javax.swing.JTable tblHistorico;
    private javax.swing.JTable tblProdOS;
    private javax.swing.JLabel telaManutencao;
    private app.bolivia.swing.JCTextField txtCodOS;
    private app.bolivia.swing.JCTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}